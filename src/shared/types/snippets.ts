export interface Snippet {
  id: string;
  name: string;
  command: string;
  description?: string;
  category?: string;
  tags?: string[];
  createdAt: Date;
  updatedAt: Date;
  usageCount?: number;
  variables?: SnippetVariable[];
  favorite?: boolean;
}

export interface SnippetVariable {
  name: string;
  description?: string;
  defaultValue?: string;
}

export interface SnippetCategory {
  id: string;
  name: string;
  color?: string;
}

export const DEFAULT_CATEGORIES: SnippetCategory[] = [
  { id: 'system', name: 'System', color: '#0e639c' },
  { id: 'network', name: 'Network', color: '#10b981' },
  { id: 'files', name: 'Files', color: '#f59e0b' },
  { id: 'docker', name: 'Docker', color: '#3b82f6' },
  { id: 'git', name: 'Git', color: '#ef4444' },
  { id: 'database', name: 'Database', color: '#8b5cf6' },
  { id: 'kubernetes', name: 'Kubernetes', color: '#326ce5' },
  { id: 'aws', name: 'AWS', color: '#ff9900' },
  { id: 'azure', name: 'Azure', color: '#0078d4' },
  { id: 'gcp', name: 'Google Cloud', color: '#4285f4' },
  { id: 'terraform', name: 'Terraform', color: '#7b42bc' },
  { id: 'ansible', name: 'Ansible', color: '#ee0000' },
  { id: 'python', name: 'Python', color: '#3776ab' },
  { id: 'node', name: 'Node.js', color: '#339933' },
  { id: 'monitoring', name: 'Monitoring', color: '#f96854' },
  { id: 'security', name: 'Security', color: '#dc2626' },
  { id: 'custom', name: 'Custom', color: '#6b7280' },
];

export const DEFAULT_SNIPPETS: Omit<Snippet, 'id' | 'createdAt' | 'updatedAt'>[] = [
  {
    name: 'System Info',
    command: 'uname -a && cat /etc/os-release',
    description: 'Display system information',
    category: 'system',
    tags: ['info', 'system'],
  },
  {
    name: 'Disk Usage',
    command: 'df -h',
    description: 'Show disk usage',
    category: 'system',
    tags: ['disk', 'storage'],
  },
  {
    name: 'Top Processes',
    command: 'top -bn1 | head -20',
    description: 'Show top processes',
    category: 'system',
    tags: ['processes', 'monitoring'],
  },
  {
    name: 'Network Interfaces',
    command: 'ip addr show',
    description: 'List network interfaces',
    category: 'network',
    tags: ['network', 'interfaces'],
  },
  {
    name: 'Open Ports',
    command: 'netstat -tuln',
    description: 'Show open ports',
    category: 'network',
    tags: ['network', 'ports'],
  },
  {
    name: 'Find Large Files',
    command: 'find {{PATH}} -type f -size +{{SIZE}}M -exec ls -lh {} \\;',
    description: 'Find files larger than specified size',
    category: 'files',
    tags: ['files', 'search'],
    variables: [
      { name: 'PATH', description: 'Directory path to search', defaultValue: '.' },
      { name: 'SIZE', description: 'Minimum size in MB', defaultValue: '100' },
    ],
  },
  {
    name: 'Docker PS',
    command: 'docker ps -a',
    description: 'List all containers',
    category: 'docker',
    tags: ['docker', 'containers'],
  },
  {
    name: 'Docker Images',
    command: 'docker images',
    description: 'List docker images',
    category: 'docker',
    tags: ['docker', 'images'],
  },
  {
    name: 'Git Status',
    command: 'git status',
    description: 'Show git repository status',
    category: 'git',
    tags: ['git', 'version control'],
  },
  {
    name: 'Git Log',
    command: 'git log --oneline -n {{COUNT}}',
    description: 'Show recent git commits',
    category: 'git',
    tags: ['git', 'history'],
    variables: [
      { name: 'COUNT', description: 'Number of commits to show', defaultValue: '10' },
    ],
  },
  // Kubernetes
  {
    name: 'Get Pods',
    command: 'kubectl get pods -n {{NAMESPACE}}',
    description: 'List pods in namespace',
    category: 'kubernetes',
    tags: ['k8s', 'pods'],
    variables: [{ name: 'NAMESPACE', description: 'Kubernetes namespace', defaultValue: 'default' }],
  },
  {
    name: 'Describe Pod',
    command: 'kubectl describe pod {{POD_NAME}} -n {{NAMESPACE}}',
    description: 'Show pod details',
    category: 'kubernetes',
    tags: ['k8s', 'debug'],
    variables: [
      { name: 'POD_NAME', description: 'Pod name', defaultValue: '' },
      { name: 'NAMESPACE', description: 'Namespace', defaultValue: 'default' },
    ],
  },
  {
    name: 'Pod Logs',
    command: 'kubectl logs -f {{POD_NAME}} -n {{NAMESPACE}}',
    description: 'Stream pod logs',
    category: 'kubernetes',
    tags: ['k8s', 'logs'],
    variables: [
      { name: 'POD_NAME', description: 'Pod name', defaultValue: '' },
      { name: 'NAMESPACE', description: 'Namespace', defaultValue: 'default' },
    ],
  },
  {
    name: 'Get Services',
    command: 'kubectl get svc -n {{NAMESPACE}}',
    description: 'List services',
    category: 'kubernetes',
    tags: ['k8s', 'services'],
    variables: [{ name: 'NAMESPACE', description: 'Namespace', defaultValue: 'default' }],
  },
  {
    name: 'Get Deployments',
    command: 'kubectl get deployments -n {{NAMESPACE}}',
    description: 'List deployments',
    category: 'kubernetes',
    tags: ['k8s', 'deployments'],
    variables: [{ name: 'NAMESPACE', description: 'Namespace', defaultValue: 'default' }],
  },
  {
    name: 'Scale Deployment',
    command: 'kubectl scale deployment {{DEPLOYMENT}} --replicas={{REPLICAS}} -n {{NAMESPACE}}',
    description: 'Scale deployment replicas',
    category: 'kubernetes',
    tags: ['k8s', 'scale'],
    variables: [
      { name: 'DEPLOYMENT', description: 'Deployment name', defaultValue: '' },
      { name: 'REPLICAS', description: 'Number of replicas', defaultValue: '3' },
      { name: 'NAMESPACE', description: 'Namespace', defaultValue: 'default' },
    ],
  },
  {
    name: 'Get Nodes',
    command: 'kubectl get nodes -o wide',
    description: 'List cluster nodes',
    category: 'kubernetes',
    tags: ['k8s', 'nodes'],
  },
  {
    name: 'Exec into Pod',
    command: 'kubectl exec -it {{POD_NAME}} -n {{NAMESPACE}} -- /bin/bash',
    description: 'SSH into pod',
    category: 'kubernetes',
    tags: ['k8s', 'exec'],
    variables: [
      { name: 'POD_NAME', description: 'Pod name', defaultValue: '' },
      { name: 'NAMESPACE', description: 'Namespace', defaultValue: 'default' },
    ],
  },
  {
    name: 'Apply Manifest',
    command: 'kubectl apply -f {{FILE}}',
    description: 'Apply K8s manifest',
    category: 'kubernetes',
    tags: ['k8s', 'deploy'],
    variables: [{ name: 'FILE', description: 'Manifest file path', defaultValue: 'manifest.yaml' }],
  },
  {
    name: 'Get ConfigMaps',
    command: 'kubectl get configmaps -n {{NAMESPACE}}',
    description: 'List ConfigMaps',
    category: 'kubernetes',
    tags: ['k8s', 'config'],
    variables: [{ name: 'NAMESPACE', description: 'Namespace', defaultValue: 'default' }],
  },
  // AWS
  {
    name: 'List EC2 Instances',
    command: 'aws ec2 describe-instances --query "Reservations[*].Instances[*].[InstanceId,State.Name,InstanceType,PublicIpAddress]" --output table',
    description: 'List all EC2 instances',
    category: 'aws',
    tags: ['aws', 'ec2'],
  },
  {
    name: 'List S3 Buckets',
    command: 'aws s3 ls',
    description: 'List all S3 buckets',
    category: 'aws',
    tags: ['aws', 's3'],
  },
  {
    name: 'S3 Sync',
    command: 'aws s3 sync {{LOCAL_PATH}} s3://{{BUCKET}}/{{PREFIX}}',
    description: 'Sync local dir to S3',
    category: 'aws',
    tags: ['aws', 's3', 'sync'],
    variables: [
      { name: 'LOCAL_PATH', description: 'Local directory', defaultValue: './' },
      { name: 'BUCKET', description: 'S3 bucket name', defaultValue: '' },
      { name: 'PREFIX', description: 'S3 prefix/path', defaultValue: '' },
    ],
  },
  {
    name: 'List ECS Clusters',
    command: 'aws ecs list-clusters',
    description: 'List ECS clusters',
    category: 'aws',
    tags: ['aws', 'ecs'],
  },
  {
    name: 'ECS Services',
    command: 'aws ecs list-services --cluster {{CLUSTER}}',
    description: 'List services in ECS cluster',
    category: 'aws',
    tags: ['aws', 'ecs'],
    variables: [{ name: 'CLUSTER', description: 'ECS cluster name', defaultValue: '' }],
  },
  {
    name: 'CloudWatch Logs',
    command: 'aws logs tail {{LOG_GROUP}} --follow',
    description: 'Stream CloudWatch logs',
    category: 'aws',
    tags: ['aws', 'logs', 'cloudwatch'],
    variables: [{ name: 'LOG_GROUP', description: 'Log group name', defaultValue: '' }],
  },
  {
    name: 'Lambda Functions',
    command: 'aws lambda list-functions --query "Functions[*].[FunctionName,Runtime,LastModified]" --output table',
    description: 'List Lambda functions',
    category: 'aws',
    tags: ['aws', 'lambda'],
  },
  {
    name: 'Invoke Lambda',
    command: 'aws lambda invoke --function-name {{FUNCTION}} --payload \'{{PAYLOAD}}\' response.json',
    description: 'Invoke Lambda function',
    category: 'aws',
    tags: ['aws', 'lambda'],
    variables: [
      { name: 'FUNCTION', description: 'Function name', defaultValue: '' },
      { name: 'PAYLOAD', description: 'JSON payload', defaultValue: '{}' },
    ],
  },
  {
    name: 'RDS Instances',
    command: 'aws rds describe-db-instances --query "DBInstances[*].[DBInstanceIdentifier,DBInstanceStatus,Engine]" --output table',
    description: 'List RDS instances',
    category: 'aws',
    tags: ['aws', 'rds', 'database'],
  },
  {
    name: 'ECR Repositories',
    command: 'aws ecr describe-repositories --query "repositories[*].[repositoryName,repositoryUri]" --output table',
    description: 'List ECR repositories',
    category: 'aws',
    tags: ['aws', 'ecr', 'docker'],
  },
  {
    name: 'CloudFormation Stacks',
    command: 'aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE UPDATE_COMPLETE --query "StackSummaries[*].[StackName,StackStatus]" --output table',
    description: 'List CloudFormation stacks',
    category: 'aws',
    tags: ['aws', 'cloudformation'],
  },
  // Azure
  {
    name: 'Azure Login',
    command: 'az login',
    description: 'Login to Azure CLI',
    category: 'azure',
    tags: ['azure', 'auth'],
  },
  {
    name: 'List VMs',
    command: 'az vm list --output table',
    description: 'List all virtual machines',
    category: 'azure',
    tags: ['azure', 'vm'],
  },
  {
    name: 'List Resource Groups',
    command: 'az group list --output table',
    description: 'List resource groups',
    category: 'azure',
    tags: ['azure', 'resources'],
  },
  {
    name: 'AKS Clusters',
    command: 'az aks list --output table',
    description: 'List AKS clusters',
    category: 'azure',
    tags: ['azure', 'aks', 'kubernetes'],
  },
  {
    name: 'Get AKS Credentials',
    command: 'az aks get-credentials --resource-group {{RG}} --name {{CLUSTER}}',
    description: 'Get AKS kubeconfig',
    category: 'azure',
    tags: ['azure', 'aks', 'kubectl'],
    variables: [
      { name: 'RG', description: 'Resource group', defaultValue: '' },
      { name: 'CLUSTER', description: 'AKS cluster name', defaultValue: '' },
    ],
  },
  {
    name: 'List Storage Accounts',
    command: 'az storage account list --output table',
    description: 'List storage accounts',
    category: 'azure',
    tags: ['azure', 'storage'],
  },
  {
    name: 'Container Instances',
    command: 'az container list --output table',
    description: 'List Azure Container Instances',
    category: 'azure',
    tags: ['azure', 'aci', 'containers'],
  },
  {
    name: 'Function Apps',
    command: 'az functionapp list --output table',
    description: 'List Azure Function Apps',
    category: 'azure',
    tags: ['azure', 'functions'],
  },
  {
    name: 'SQL Databases',
    command: 'az sql db list --resource-group {{RG}} --server {{SERVER}} --output table',
    description: 'List SQL databases',
    category: 'azure',
    tags: ['azure', 'sql', 'database'],
    variables: [
      { name: 'RG', description: 'Resource group', defaultValue: '' },
      { name: 'SERVER', description: 'SQL server name', defaultValue: '' },
    ],
  },
  {
    name: 'App Services',
    command: 'az webapp list --output table',
    description: 'List App Services',
    category: 'azure',
    tags: ['azure', 'webapp'],
  },
  // Google Cloud Platform
  {
    name: 'GCP Login',
    command: 'gcloud auth login',
    description: 'Authenticate with GCP',
    category: 'gcp',
    tags: ['gcp', 'auth'],
  },
  {
    name: 'List GCE Instances',
    command: 'gcloud compute instances list',
    description: 'List Compute Engine instances',
    category: 'gcp',
    tags: ['gcp', 'compute'],
  },
  {
    name: 'GKE Clusters',
    command: 'gcloud container clusters list',
    description: 'List GKE clusters',
    category: 'gcp',
    tags: ['gcp', 'gke', 'kubernetes'],
  },
  {
    name: 'Get GKE Credentials',
    command: 'gcloud container clusters get-credentials {{CLUSTER}} --zone {{ZONE}}',
    description: 'Get GKE kubeconfig',
    category: 'gcp',
    tags: ['gcp', 'gke', 'kubectl'],
    variables: [
      { name: 'CLUSTER', description: 'GKE cluster name', defaultValue: '' },
      { name: 'ZONE', description: 'GCP zone', defaultValue: 'us-central1-a' },
    ],
  },
  {
    name: 'Cloud Storage Buckets',
    command: 'gsutil ls',
    description: 'List GCS buckets',
    category: 'gcp',
    tags: ['gcp', 'storage'],
  },
  {
    name: 'Cloud Functions',
    command: 'gcloud functions list',
    description: 'List Cloud Functions',
    category: 'gcp',
    tags: ['gcp', 'functions'],
  },
  {
    name: 'Cloud SQL Instances',
    command: 'gcloud sql instances list',
    description: 'List Cloud SQL instances',
    category: 'gcp',
    tags: ['gcp', 'sql', 'database'],
  },
  {
    name: 'Cloud Run Services',
    command: 'gcloud run services list',
    description: 'List Cloud Run services',
    category: 'gcp',
    tags: ['gcp', 'cloudrun'],
  },
  // Terraform
  {
    name: 'Terraform Init',
    command: 'terraform init',
    description: 'Initialize Terraform',
    category: 'terraform',
    tags: ['terraform', 'iac'],
  },
  {
    name: 'Terraform Plan',
    command: 'terraform plan -out=tfplan',
    description: 'Create execution plan',
    category: 'terraform',
    tags: ['terraform', 'plan'],
  },
  {
    name: 'Terraform Apply',
    command: 'terraform apply tfplan',
    description: 'Apply changes',
    category: 'terraform',
    tags: ['terraform', 'deploy'],
  },
  {
    name: 'Terraform Destroy',
    command: 'terraform destroy',
    description: 'Destroy infrastructure',
    category: 'terraform',
    tags: ['terraform', 'cleanup'],
  },
  {
    name: 'Terraform Workspace',
    command: 'terraform workspace select {{WORKSPACE}}',
    description: 'Switch workspace',
    category: 'terraform',
    tags: ['terraform', 'workspace'],
    variables: [{ name: 'WORKSPACE', description: 'Workspace name', defaultValue: 'default' }],
  },
  {
    name: 'Terraform State List',
    command: 'terraform state list',
    description: 'List resources in state',
    category: 'terraform',
    tags: ['terraform', 'state'],
  },
  {
    name: 'Terraform Import',
    command: 'terraform import {{RESOURCE}} {{ID}}',
    description: 'Import existing resource',
    category: 'terraform',
    tags: ['terraform', 'import'],
    variables: [
      { name: 'RESOURCE', description: 'Resource address', defaultValue: '' },
      { name: 'ID', description: 'Resource ID', defaultValue: '' },
    ],
  },
  // Ansible
  {
    name: 'Ansible Playbook',
    command: 'ansible-playbook -i {{INVENTORY}} {{PLAYBOOK}}',
    description: 'Run Ansible playbook',
    category: 'ansible',
    tags: ['ansible', 'automation'],
    variables: [
      { name: 'INVENTORY', description: 'Inventory file', defaultValue: 'hosts' },
      { name: 'PLAYBOOK', description: 'Playbook file', defaultValue: 'playbook.yml' },
    ],
  },
  {
    name: 'Ansible Ping',
    command: 'ansible all -i {{INVENTORY}} -m ping',
    description: 'Test host connectivity',
    category: 'ansible',
    tags: ['ansible', 'test'],
    variables: [{ name: 'INVENTORY', description: 'Inventory file', defaultValue: 'hosts' }],
  },
  {
    name: 'Ansible Ad-hoc',
    command: 'ansible {{HOSTS}} -i {{INVENTORY}} -m {{MODULE}} -a "{{ARGS}}"',
    description: 'Run ad-hoc command',
    category: 'ansible',
    tags: ['ansible', 'adhoc'],
    variables: [
      { name: 'HOSTS', description: 'Target hosts', defaultValue: 'all' },
      { name: 'INVENTORY', description: 'Inventory file', defaultValue: 'hosts' },
      { name: 'MODULE', description: 'Module name', defaultValue: 'shell' },
      { name: 'ARGS', description: 'Module arguments', defaultValue: '' },
    ],
  },
  {
    name: 'Ansible Vault Encrypt',
    command: 'ansible-vault encrypt {{FILE}}',
    description: 'Encrypt file with Ansible Vault',
    category: 'ansible',
    tags: ['ansible', 'security', 'vault'],
    variables: [{ name: 'FILE', description: 'File to encrypt', defaultValue: '' }],
  },
  {
    name: 'Ansible Galaxy Install',
    command: 'ansible-galaxy install -r requirements.yml',
    description: 'Install Ansible roles',
    category: 'ansible',
    tags: ['ansible', 'galaxy'],
  },
  // Python
  {
    name: 'Create venv',
    command: 'python3 -m venv {{NAME}}',
    description: 'Create virtual environment',
    category: 'python',
    tags: ['python', 'venv'],
    variables: [{ name: 'NAME', description: 'Venv name', defaultValue: 'venv' }],
  },
  {
    name: 'Activate venv',
    command: 'source {{NAME}}/bin/activate',
    description: 'Activate virtual environment',
    category: 'python',
    tags: ['python', 'venv'],
    variables: [{ name: 'NAME', description: 'Venv name', defaultValue: 'venv' }],
  },
  {
    name: 'Pip Install Requirements',
    command: 'pip install -r requirements.txt',
    description: 'Install Python dependencies',
    category: 'python',
    tags: ['python', 'pip'],
  },
  {
    name: 'Pip Freeze',
    command: 'pip freeze > requirements.txt',
    description: 'Export dependencies',
    category: 'python',
    tags: ['python', 'pip'],
  },
  {
    name: 'Python HTTP Server',
    command: 'python3 -m http.server {{PORT}}',
    description: 'Start simple HTTP server',
    category: 'python',
    tags: ['python', 'server'],
    variables: [{ name: 'PORT', description: 'Port number', defaultValue: '8000' }],
  },
  {
    name: 'Python Format JSON',
    command: 'python3 -m json.tool {{FILE}}',
    description: 'Pretty-print JSON file',
    category: 'python',
    tags: ['python', 'json'],
    variables: [{ name: 'FILE', description: 'JSON file', defaultValue: 'data.json' }],
  },
  {
    name: 'Python Profile',
    command: 'python3 -m cProfile -s time {{SCRIPT}}',
    description: 'Profile Python script',
    category: 'python',
    tags: ['python', 'performance'],
    variables: [{ name: 'SCRIPT', description: 'Python script', defaultValue: 'script.py' }],
  },
  {
    name: 'Pytest Run',
    command: 'pytest {{PATH}} -v',
    description: 'Run Python tests',
    category: 'python',
    tags: ['python', 'testing'],
    variables: [{ name: 'PATH', description: 'Test path', defaultValue: 'tests/' }],
  },
  // Node.js
  {
    name: 'NPM Install',
    command: 'npm install',
    description: 'Install Node dependencies',
    category: 'node',
    tags: ['node', 'npm'],
  },
  {
    name: 'NPM Run Script',
    command: 'npm run {{SCRIPT}}',
    description: 'Run npm script',
    category: 'node',
    tags: ['node', 'npm'],
    variables: [{ name: 'SCRIPT', description: 'Script name', defaultValue: 'start' }],
  },
  {
    name: 'NPM Outdated',
    command: 'npm outdated',
    description: 'Check for outdated packages',
    category: 'node',
    tags: ['node', 'npm'],
  },
  {
    name: 'NPM Audit',
    command: 'npm audit',
    description: 'Check for vulnerabilities',
    category: 'node',
    tags: ['node', 'npm', 'security'],
  },
  {
    name: 'NPM Audit Fix',
    command: 'npm audit fix',
    description: 'Fix vulnerabilities',
    category: 'node',
    tags: ['node', 'npm', 'security'],
  },
  {
    name: 'Node Version',
    command: 'node --version && npm --version',
    description: 'Show Node and npm versions',
    category: 'node',
    tags: ['node', 'version'],
  },
  {
    name: 'PM2 Start',
    command: 'pm2 start {{SCRIPT}} --name {{NAME}}',
    description: 'Start app with PM2',
    category: 'node',
    tags: ['node', 'pm2'],
    variables: [
      { name: 'SCRIPT', description: 'Script file', defaultValue: 'app.js' },
      { name: 'NAME', description: 'App name', defaultValue: 'app' },
    ],
  },
  {
    name: 'PM2 List',
    command: 'pm2 list',
    description: 'List PM2 processes',
    category: 'node',
    tags: ['node', 'pm2'],
  },
  {
    name: 'PM2 Logs',
    command: 'pm2 logs {{NAME}}',
    description: 'View PM2 logs',
    category: 'node',
    tags: ['node', 'pm2', 'logs'],
    variables: [{ name: 'NAME', description: 'App name', defaultValue: '' }],
  },
  // Monitoring
  {
    name: 'Watch Command',
    command: 'watch -n {{SECONDS}} {{COMMAND}}',
    description: 'Run command periodically',
    category: 'monitoring',
    tags: ['monitoring', 'watch'],
    variables: [
      { name: 'SECONDS', description: 'Interval in seconds', defaultValue: '2' },
      { name: 'COMMAND', description: 'Command to run', defaultValue: '' },
    ],
  },
  {
    name: 'System Resources',
    command: 'vmstat 1 10',
    description: 'Monitor system resources',
    category: 'monitoring',
    tags: ['monitoring', 'system'],
  },
  {
    name: 'IO Stats',
    command: 'iostat -x 1 10',
    description: 'Monitor I/O statistics',
    category: 'monitoring',
    tags: ['monitoring', 'io'],
  },
  {
    name: 'Network Stats',
    command: 'netstat -i',
    description: 'Network interface statistics',
    category: 'monitoring',
    tags: ['monitoring', 'network'],
  },
  {
    name: 'Process Tree',
    command: 'pstree -p {{PID}}',
    description: 'Show process tree',
    category: 'monitoring',
    tags: ['monitoring', 'processes'],
    variables: [{ name: 'PID', description: 'Process ID (optional)', defaultValue: '' }],
  },
  {
    name: 'Memory Usage',
    command: 'free -h && sync && echo 3 | sudo tee /proc/sys/vm/drop_caches',
    description: 'Show memory and clear cache',
    category: 'monitoring',
    tags: ['monitoring', 'memory'],
  },
  {
    name: 'TCP Connections',
    command: 'ss -tan',
    description: 'Show TCP connections',
    category: 'monitoring',
    tags: ['monitoring', 'network', 'tcp'],
  },
  {
    name: 'Disk IO Top',
    command: 'iotop -o',
    description: 'Show processes by I/O usage',
    category: 'monitoring',
    tags: ['monitoring', 'io', 'disk'],
  },
  // Security
  {
    name: 'Open Ports Scan',
    command: 'sudo nmap -sT -O localhost',
    description: 'Scan open ports',
    category: 'security',
    tags: ['security', 'nmap', 'ports'],
  },
  {
    name: 'Check SSL Certificate',
    command: 'openssl s_client -connect {{HOST}}:{{PORT}} -showcerts',
    description: 'Check SSL certificate',
    category: 'security',
    tags: ['security', 'ssl', 'openssl'],
    variables: [
      { name: 'HOST', description: 'Hostname', defaultValue: '' },
      { name: 'PORT', description: 'Port', defaultValue: '443' },
    ],
  },
  {
    name: 'Generate SSH Key',
    command: 'ssh-keygen -t ed25519 -C "{{EMAIL}}" -f ~/.ssh/id_ed25519',
    description: 'Generate SSH key pair',
    category: 'security',
    tags: ['security', 'ssh', 'keys'],
    variables: [{ name: 'EMAIL', description: 'Email address', defaultValue: '' }],
  },
  {
    name: 'File Permissions',
    command: 'find {{PATH}} -type f -perm {{PERM}}',
    description: 'Find files by permissions',
    category: 'security',
    tags: ['security', 'permissions'],
    variables: [
      { name: 'PATH', description: 'Search path', defaultValue: '.' },
      { name: 'PERM', description: 'Permission mask', defaultValue: '0777' },
    ],
  },
  {
    name: 'Failed Login Attempts',
    command: 'sudo grep "Failed password" /var/log/auth.log | tail -20',
    description: 'Show failed SSH attempts',
    category: 'security',
    tags: ['security', 'ssh', 'audit'],
  },
  {
    name: 'Listening Services',
    command: 'sudo lsof -i -P -n | grep LISTEN',
    description: 'Show listening services',
    category: 'security',
    tags: ['security', 'ports', 'services'],
  },
  {
    name: 'User Login History',
    command: 'last -a | head -20',
    description: 'Show user login history',
    category: 'security',
    tags: ['security', 'audit', 'users'],
  },
  {
    name: 'GPG Encrypt File',
    command: 'gpg -c {{FILE}}',
    description: 'Encrypt file with GPG',
    category: 'security',
    tags: ['security', 'gpg', 'encryption'],
    variables: [{ name: 'FILE', description: 'File to encrypt', defaultValue: '' }],
  },
  // More Docker
  {
    name: 'Docker Prune All',
    command: 'docker system prune -a --volumes',
    description: 'Clean up Docker system',
    category: 'docker',
    tags: ['docker', 'cleanup'],
  },
  {
    name: 'Docker Build',
    command: 'docker build -t {{TAG}} {{PATH}}',
    description: 'Build Docker image',
    category: 'docker',
    tags: ['docker', 'build'],
    variables: [
      { name: 'TAG', description: 'Image tag', defaultValue: 'myapp:latest' },
      { name: 'PATH', description: 'Build context', defaultValue: '.' },
    ],
  },
  {
    name: 'Docker Compose Up',
    command: 'docker-compose up -d',
    description: 'Start services with compose',
    category: 'docker',
    tags: ['docker', 'compose'],
  },
  {
    name: 'Docker Compose Down',
    command: 'docker-compose down',
    description: 'Stop compose services',
    category: 'docker',
    tags: ['docker', 'compose'],
  },
  {
    name: 'Docker Compose Logs',
    command: 'docker-compose logs -f {{SERVICE}}',
    description: 'Follow compose logs',
    category: 'docker',
    tags: ['docker', 'compose', 'logs'],
    variables: [{ name: 'SERVICE', description: 'Service name (optional)', defaultValue: '' }],
  },
  {
    name: 'Docker Stats',
    command: 'docker stats --no-stream',
    description: 'Container resource usage',
    category: 'docker',
    tags: ['docker', 'monitoring'],
  },
  {
    name: 'Docker Exec',
    command: 'docker exec -it {{CONTAINER}} /bin/bash',
    description: 'Execute bash in container',
    category: 'docker',
    tags: ['docker', 'exec'],
    variables: [{ name: 'CONTAINER', description: 'Container ID/name', defaultValue: '' }],
  },
  // More Git
  {
    name: 'Git Branch',
    command: 'git branch -a',
    description: 'List all branches',
    category: 'git',
    tags: ['git', 'branches'],
  },
  {
    name: 'Git Checkout',
    command: 'git checkout {{BRANCH}}',
    description: 'Switch to branch',
    category: 'git',
    tags: ['git', 'branches'],
    variables: [{ name: 'BRANCH', description: 'Branch name', defaultValue: '' }],
  },
  {
    name: 'Git Pull',
    command: 'git pull origin {{BRANCH}}',
    description: 'Pull from remote',
    category: 'git',
    tags: ['git', 'sync'],
    variables: [{ name: 'BRANCH', description: 'Branch name', defaultValue: 'main' }],
  },
  {
    name: 'Git Push',
    command: 'git push origin {{BRANCH}}',
    description: 'Push to remote',
    category: 'git',
    tags: ['git', 'sync'],
    variables: [{ name: 'BRANCH', description: 'Branch name', defaultValue: 'main' }],
  },
  {
    name: 'Git Diff',
    command: 'git diff {{FILE}}',
    description: 'Show file changes',
    category: 'git',
    tags: ['git', 'diff'],
    variables: [{ name: 'FILE', description: 'File path (optional)', defaultValue: '' }],
  },
  {
    name: 'Git Reset Hard',
    command: 'git reset --hard HEAD',
    description: 'Reset to last commit',
    category: 'git',
    tags: ['git', 'reset'],
  },
  {
    name: 'Git Stash',
    command: 'git stash save "{{MESSAGE}}"',
    description: 'Stash changes',
    category: 'git',
    tags: ['git', 'stash'],
    variables: [{ name: 'MESSAGE', description: 'Stash message', defaultValue: 'WIP' }],
  },
  {
    name: 'Git Stash Pop',
    command: 'git stash pop',
    description: 'Apply stashed changes',
    category: 'git',
    tags: ['git', 'stash'],
  },
  // More Database
  {
    name: 'MySQL Dump',
    command: 'mysqldump -u {{USER}} -p {{DATABASE}} > backup.sql',
    description: 'Backup MySQL database',
    category: 'database',
    tags: ['mysql', 'backup'],
    variables: [
      { name: 'USER', description: 'MySQL user', defaultValue: 'root' },
      { name: 'DATABASE', description: 'Database name', defaultValue: '' },
    ],
  },
  {
    name: 'PostgreSQL Dump',
    command: 'pg_dump -U {{USER}} {{DATABASE}} > backup.sql',
    description: 'Backup PostgreSQL database',
    category: 'database',
    tags: ['postgresql', 'backup'],
    variables: [
      { name: 'USER', description: 'PostgreSQL user', defaultValue: 'postgres' },
      { name: 'DATABASE', description: 'Database name', defaultValue: '' },
    ],
  },
  {
    name: 'MongoDB Dump',
    command: 'mongodump --db {{DATABASE}} --out {{PATH}}',
    description: 'Backup MongoDB database',
    category: 'database',
    tags: ['mongodb', 'backup'],
    variables: [
      { name: 'DATABASE', description: 'Database name', defaultValue: '' },
      { name: 'PATH', description: 'Output path', defaultValue: './backup' },
    ],
  },
  {
    name: 'Redis CLI',
    command: 'redis-cli -h {{HOST}} -p {{PORT}}',
    description: 'Connect to Redis',
    category: 'database',
    tags: ['redis', 'cli'],
    variables: [
      { name: 'HOST', description: 'Redis host', defaultValue: 'localhost' },
      { name: 'PORT', description: 'Redis port', defaultValue: '6379' },
    ],
  },
  // More GCP
  {
    name: 'GCP Set Project',
    command: 'gcloud config set project {{PROJECT_ID}}',
    description: 'Set active GCP project',
    category: 'gcp',
    tags: ['gcp', 'config'],
    variables: [{ name: 'PROJECT_ID', description: 'Project ID', defaultValue: '' }],
  },
  {
    name: 'GCP Logs',
    command: 'gcloud logging read "{{FILTER}}" --limit {{LIMIT}}',
    description: 'Read GCP logs',
    category: 'gcp',
    tags: ['gcp', 'logs'],
    variables: [
      { name: 'FILTER', description: 'Log filter', defaultValue: 'resource.type=gce_instance' },
      { name: 'LIMIT', description: 'Number of entries', defaultValue: '50' },
    ],
  },
  {
    name: 'GCP IAM List',
    command: 'gcloud projects get-iam-policy {{PROJECT_ID}}',
    description: 'List IAM policies',
    category: 'gcp',
    tags: ['gcp', 'iam', 'security'],
    variables: [{ name: 'PROJECT_ID', description: 'Project ID', defaultValue: '' }],
  },
  {
    name: 'GCS Copy',
    command: 'gsutil cp {{LOCAL_FILE}} gs://{{BUCKET}}/{{PATH}}',
    description: 'Copy file to GCS',
    category: 'gcp',
    tags: ['gcp', 'storage'],
    variables: [
      { name: 'LOCAL_FILE', description: 'Local file path', defaultValue: '' },
      { name: 'BUCKET', description: 'Bucket name', defaultValue: '' },
      { name: 'PATH', description: 'Destination path', defaultValue: '' },
    ],
  },
  {
    name: 'GCP Firewall Rules',
    command: 'gcloud compute firewall-rules list',
    description: 'List firewall rules',
    category: 'gcp',
    tags: ['gcp', 'network', 'security'],
  },
  // More Terraform
  {
    name: 'Terraform Validate',
    command: 'terraform validate',
    description: 'Validate Terraform config',
    category: 'terraform',
    tags: ['terraform', 'validate'],
  },
  {
    name: 'Terraform Format',
    command: 'terraform fmt -recursive',
    description: 'Format Terraform files',
    category: 'terraform',
    tags: ['terraform', 'format'],
  },
  {
    name: 'Terraform Output',
    command: 'terraform output {{OUTPUT_NAME}}',
    description: 'Show terraform output',
    category: 'terraform',
    tags: ['terraform', 'output'],
    variables: [{ name: 'OUTPUT_NAME', description: 'Output name (optional)', defaultValue: '' }],
  },
  {
    name: 'Terraform Taint',
    command: 'terraform taint {{RESOURCE}}',
    description: 'Mark resource for recreation',
    category: 'terraform',
    tags: ['terraform', 'taint'],
    variables: [{ name: 'RESOURCE', description: 'Resource address', defaultValue: '' }],
  },
  {
    name: 'Terraform Graph',
    command: 'terraform graph | dot -Tpng > graph.png',
    description: 'Generate resource graph',
    category: 'terraform',
    tags: ['terraform', 'visualization'],
  },
  {
    name: 'Terraform Show',
    command: 'terraform show',
    description: 'Show current state',
    category: 'terraform',
    tags: ['terraform', 'state'],
  },
  // More Ansible
  {
    name: 'Ansible Facts',
    command: 'ansible {{HOSTS}} -i {{INVENTORY}} -m setup',
    description: 'Gather host facts',
    category: 'ansible',
    tags: ['ansible', 'facts'],
    variables: [
      { name: 'HOSTS', description: 'Target hosts', defaultValue: 'all' },
      { name: 'INVENTORY', description: 'Inventory file', defaultValue: 'hosts' },
    ],
  },
  {
    name: 'Ansible Syntax Check',
    command: 'ansible-playbook --syntax-check {{PLAYBOOK}}',
    description: 'Check playbook syntax',
    category: 'ansible',
    tags: ['ansible', 'validate'],
    variables: [{ name: 'PLAYBOOK', description: 'Playbook file', defaultValue: 'playbook.yml' }],
  },
  {
    name: 'Ansible Dry Run',
    command: 'ansible-playbook -i {{INVENTORY}} {{PLAYBOOK}} --check',
    description: 'Dry run playbook',
    category: 'ansible',
    tags: ['ansible', 'test'],
    variables: [
      { name: 'INVENTORY', description: 'Inventory file', defaultValue: 'hosts' },
      { name: 'PLAYBOOK', description: 'Playbook file', defaultValue: 'playbook.yml' },
    ],
  },
  {
    name: 'Ansible Vault View',
    command: 'ansible-vault view {{FILE}}',
    description: 'View encrypted file',
    category: 'ansible',
    tags: ['ansible', 'vault'],
    variables: [{ name: 'FILE', description: 'Encrypted file', defaultValue: '' }],
  },
  {
    name: 'Ansible Vault Decrypt',
    command: 'ansible-vault decrypt {{FILE}}',
    description: 'Decrypt file',
    category: 'ansible',
    tags: ['ansible', 'vault'],
    variables: [{ name: 'FILE', description: 'File to decrypt', defaultValue: '' }],
  },
  {
    name: 'Ansible List Hosts',
    command: 'ansible-playbook -i {{INVENTORY}} {{PLAYBOOK}} --list-hosts',
    description: 'List playbook target hosts',
    category: 'ansible',
    tags: ['ansible', 'inventory'],
    variables: [
      { name: 'INVENTORY', description: 'Inventory file', defaultValue: 'hosts' },
      { name: 'PLAYBOOK', description: 'Playbook file', defaultValue: 'playbook.yml' },
    ],
  },
  // More Python
  {
    name: 'Python Interactive',
    command: 'python3 -i {{SCRIPT}}',
    description: 'Run script in interactive mode',
    category: 'python',
    tags: ['python', 'repl'],
    variables: [{ name: 'SCRIPT', description: 'Python script', defaultValue: '' }],
  },
  {
    name: 'Python Debugger',
    command: 'python3 -m pdb {{SCRIPT}}',
    description: 'Debug Python script',
    category: 'python',
    tags: ['python', 'debug'],
    variables: [{ name: 'SCRIPT', description: 'Python script', defaultValue: 'script.py' }],
  },
  {
    name: 'Black Format',
    command: 'black {{PATH}}',
    description: 'Format Python code with Black',
    category: 'python',
    tags: ['python', 'format'],
    variables: [{ name: 'PATH', description: 'File or directory', defaultValue: '.' }],
  },
  {
    name: 'Flake8 Lint',
    command: 'flake8 {{PATH}}',
    description: 'Lint Python code',
    category: 'python',
    tags: ['python', 'lint'],
    variables: [{ name: 'PATH', description: 'File or directory', defaultValue: '.' }],
  },
  {
    name: 'MyPy Type Check',
    command: 'mypy {{PATH}}',
    description: 'Type check Python code',
    category: 'python',
    tags: ['python', 'types'],
    variables: [{ name: 'PATH', description: 'File or directory', defaultValue: '.' }],
  },
  {
    name: 'Pytest Coverage',
    command: 'pytest --cov={{PACKAGE}} --cov-report=html',
    description: 'Run tests with coverage',
    category: 'python',
    tags: ['python', 'testing', 'coverage'],
    variables: [{ name: 'PACKAGE', description: 'Package name', defaultValue: '.' }],
  },
  {
    name: 'Python Package Info',
    command: 'pip show {{PACKAGE}}',
    description: 'Show package information',
    category: 'python',
    tags: ['python', 'pip'],
    variables: [{ name: 'PACKAGE', description: 'Package name', defaultValue: '' }],
  },
  {
    name: 'Python List Packages',
    command: 'pip list',
    description: 'List installed packages',
    category: 'python',
    tags: ['python', 'pip'],
  },
  {
    name: 'Jupyter Notebook',
    command: 'jupyter notebook',
    description: 'Start Jupyter notebook server',
    category: 'python',
    tags: ['python', 'jupyter'],
  },
  // More Node.js
  {
    name: 'NPM Init',
    command: 'npm init -y',
    description: 'Initialize new npm project',
    category: 'node',
    tags: ['node', 'npm', 'init'],
  },
  {
    name: 'NPM Update',
    command: 'npm update',
    description: 'Update packages',
    category: 'node',
    tags: ['node', 'npm'],
  },
  {
    name: 'NPM Link',
    command: 'npm link {{PACKAGE}}',
    description: 'Link local package',
    category: 'node',
    tags: ['node', 'npm', 'dev'],
    variables: [{ name: 'PACKAGE', description: 'Package name', defaultValue: '' }],
  },
  {
    name: 'NPM Publish',
    command: 'npm publish',
    description: 'Publish package to npm',
    category: 'node',
    tags: ['node', 'npm', 'publish'],
  },
  {
    name: 'Yarn Install',
    command: 'yarn install',
    description: 'Install with Yarn',
    category: 'node',
    tags: ['node', 'yarn'],
  },
  {
    name: 'Yarn Add',
    command: 'yarn add {{PACKAGE}}',
    description: 'Add package with Yarn',
    category: 'node',
    tags: ['node', 'yarn'],
    variables: [{ name: 'PACKAGE', description: 'Package name', defaultValue: '' }],
  },
  {
    name: 'PM2 Restart',
    command: 'pm2 restart {{NAME}}',
    description: 'Restart PM2 process',
    category: 'node',
    tags: ['node', 'pm2'],
    variables: [{ name: 'NAME', description: 'App name', defaultValue: 'all' }],
  },
  {
    name: 'PM2 Stop',
    command: 'pm2 stop {{NAME}}',
    description: 'Stop PM2 process',
    category: 'node',
    tags: ['node', 'pm2'],
    variables: [{ name: 'NAME', description: 'App name', defaultValue: 'all' }],
  },
  {
    name: 'PM2 Delete',
    command: 'pm2 delete {{NAME}}',
    description: 'Delete PM2 process',
    category: 'node',
    tags: ['node', 'pm2'],
    variables: [{ name: 'NAME', description: 'App name', defaultValue: 'all' }],
  },
  {
    name: 'PM2 Monit',
    command: 'pm2 monit',
    description: 'Monitor PM2 processes',
    category: 'node',
    tags: ['node', 'pm2', 'monitoring'],
  },
  {
    name: 'NVM Use',
    command: 'nvm use {{VERSION}}',
    description: 'Switch Node version',
    category: 'node',
    tags: ['node', 'nvm'],
    variables: [{ name: 'VERSION', description: 'Node version', defaultValue: 'node' }],
  },
  {
    name: 'NVM List',
    command: 'nvm ls',
    description: 'List installed Node versions',
    category: 'node',
    tags: ['node', 'nvm'],
  },
  // More Monitoring
  {
    name: 'Htop',
    command: 'htop',
    description: 'Interactive process viewer',
    category: 'monitoring',
    tags: ['monitoring', 'processes'],
  },
  {
    name: 'Load Average',
    command: 'uptime',
    description: 'Show system uptime and load',
    category: 'monitoring',
    tags: ['monitoring', 'system'],
  },
  {
    name: 'Who is Logged In',
    command: 'w',
    description: 'Show who is logged in',
    category: 'monitoring',
    tags: ['monitoring', 'users'],
  },
  {
    name: 'Dmesg',
    command: 'dmesg | tail -50',
    description: 'Show kernel messages',
    category: 'monitoring',
    tags: ['monitoring', 'kernel'],
  },
  {
    name: 'Journal Logs',
    command: 'journalctl -f',
    description: 'Follow systemd journal',
    category: 'monitoring',
    tags: ['monitoring', 'logs', 'systemd'],
  },
  {
    name: 'Service Status',
    command: 'systemctl status {{SERVICE}}',
    description: 'Check service status',
    category: 'monitoring',
    tags: ['monitoring', 'systemd'],
    variables: [{ name: 'SERVICE', description: 'Service name', defaultValue: '' }],
  },
  {
    name: 'List Services',
    command: 'systemctl list-units --type=service',
    description: 'List all services',
    category: 'monitoring',
    tags: ['monitoring', 'systemd'],
  },
  {
    name: 'Tail Log',
    command: 'tail -f {{LOG_FILE}}',
    description: 'Follow log file',
    category: 'monitoring',
    tags: ['monitoring', 'logs'],
    variables: [{ name: 'LOG_FILE', description: 'Log file path', defaultValue: '/var/log/syslog' }],
  },
  {
    name: 'Disk SMART',
    command: 'sudo smartctl -a {{DEVICE}}',
    description: 'Check disk health',
    category: 'monitoring',
    tags: ['monitoring', 'disk', 'health'],
    variables: [{ name: 'DEVICE', description: 'Device path', defaultValue: '/dev/sda' }],
  },
  {
    name: 'Network Bandwidth',
    command: 'iftop -i {{INTERFACE}}',
    description: 'Monitor network bandwidth',
    category: 'monitoring',
    tags: ['monitoring', 'network', 'bandwidth'],
    variables: [{ name: 'INTERFACE', description: 'Network interface', defaultValue: 'eth0' }],
  },
  // More Security
  {
    name: 'SSH Copy ID',
    command: 'ssh-copy-id {{USER}}@{{HOST}}',
    description: 'Copy SSH key to remote host',
    category: 'security',
    tags: ['security', 'ssh'],
    variables: [
      { name: 'USER', description: 'Username', defaultValue: '' },
      { name: 'HOST', description: 'Hostname', defaultValue: '' },
    ],
  },
  {
    name: 'Generate Password',
    command: 'openssl rand -base64 32',
    description: 'Generate random password',
    category: 'security',
    tags: ['security', 'password'],
  },
  {
    name: 'Hash Password',
    command: 'openssl passwd -6 {{PASSWORD}}',
    description: 'Generate password hash',
    category: 'security',
    tags: ['security', 'password', 'hash'],
    variables: [{ name: 'PASSWORD', description: 'Password to hash', defaultValue: '' }],
  },
  {
    name: 'Check Open Files',
    command: 'lsof -u {{USER}}',
    description: 'List open files by user',
    category: 'security',
    tags: ['security', 'audit'],
    variables: [{ name: 'USER', description: 'Username', defaultValue: '' }],
  },
  {
    name: 'Find SUID Files',
    command: 'find / -perm -4000 -type f 2>/dev/null',
    description: 'Find SUID binaries',
    category: 'security',
    tags: ['security', 'audit', 'suid'],
  },
  {
    name: 'Check Password Expiry',
    command: 'chage -l {{USER}}',
    description: 'Show password expiry info',
    category: 'security',
    tags: ['security', 'users', 'password'],
    variables: [{ name: 'USER', description: 'Username', defaultValue: '' }],
  },
  {
    name: 'List Sudo Users',
    command: 'grep -Po \'^sudo.+:\\K.*$\' /etc/group',
    description: 'List users with sudo access',
    category: 'security',
    tags: ['security', 'sudo', 'audit'],
  },
  {
    name: 'UFW Status',
    command: 'sudo ufw status verbose',
    description: 'Check firewall status',
    category: 'security',
    tags: ['security', 'firewall'],
  },
  {
    name: 'UFW Allow Port',
    command: 'sudo ufw allow {{PORT}}',
    description: 'Allow port through firewall',
    category: 'security',
    tags: ['security', 'firewall'],
    variables: [{ name: 'PORT', description: 'Port number', defaultValue: '' }],
  },
  {
    name: 'Check Virus',
    command: 'clamscan -r {{PATH}}',
    description: 'Scan for viruses with ClamAV',
    category: 'security',
    tags: ['security', 'antivirus'],
    variables: [{ name: 'PATH', description: 'Path to scan', defaultValue: '.' }],
  },
  {
    name: 'SELinux Status',
    command: 'sestatus',
    description: 'Check SELinux status',
    category: 'security',
    tags: ['security', 'selinux'],
  },
  // More System
  {
    name: 'CPU Info',
    command: 'lscpu',
    description: 'Display CPU information',
    category: 'system',
    tags: ['system', 'hardware', 'cpu'],
  },
  {
    name: 'Memory Info',
    command: 'cat /proc/meminfo',
    description: 'Display memory information',
    category: 'system',
    tags: ['system', 'memory'],
  },
  {
    name: 'Block Devices',
    command: 'lsblk',
    description: 'List block devices',
    category: 'system',
    tags: ['system', 'disk'],
  },
  {
    name: 'PCI Devices',
    command: 'lspci',
    description: 'List PCI devices',
    category: 'system',
    tags: ['system', 'hardware'],
  },
  {
    name: 'USB Devices',
    command: 'lsusb',
    description: 'List USB devices',
    category: 'system',
    tags: ['system', 'hardware', 'usb'],
  },
  {
    name: 'Kernel Version',
    command: 'uname -r',
    description: 'Show kernel version',
    category: 'system',
    tags: ['system', 'kernel'],
  },
  {
    name: 'Distribution Info',
    command: 'lsb_release -a',
    description: 'Show distribution information',
    category: 'system',
    tags: ['system', 'distro'],
  },
  {
    name: 'Timezone',
    command: 'timedatectl',
    description: 'Show time and date settings',
    category: 'system',
    tags: ['system', 'time'],
  },
  {
    name: 'Environment Variables',
    command: 'env',
    description: 'List environment variables',
    category: 'system',
    tags: ['system', 'env'],
  },
  {
    name: 'Running Processes',
    command: 'ps aux',
    description: 'List all running processes',
    category: 'system',
    tags: ['system', 'processes'],
  },
];
